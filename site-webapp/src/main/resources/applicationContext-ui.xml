<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:task="http://www.springframework.org/schema/task" 
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<!-- <context:property-placeholder location="classpath*:application.properties" /> -->
	
	<bean id="dataConfigPropertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="locations"> 
			<list>
				<value>classpath*:application.properties</value> 
			</list> 
		</property> 
		<property name="ignoreResourceNotFound" value="true" /> 
		<property name="ignoreUnresolvablePlaceholders" value="false" /> 
		<property name="searchSystemEnvironment" value="true" /> 
	</bean>
		
	<jee:jndi-lookup id="amex.jackrabbit.repository.path" jndi-name="amex.jackrabbit.repository.path" />	
	<jee:jndi-lookup id="open.deploy.receiver.directory.path" jndi-name="open.deploy.receiver.directory.path" />	

	<import resource="classpath:/applicationContext-core.xml" />
		
	<bean id="contentManager" class="com.amex.srt.content.ContentManager" init-method="init">
		<property name="contentRepoAccessDao" ref="contentRepoAccessDao" />
		<property name="contentItemUnmarshaller" ref="contentItemUnmarshaller"/>
	</bean>	
	


	<!-- Struts 2 Action Bean Definitions -->
	<bean id="abstractBaseAction" abstract="true" class="com.amex.srt.struts.action.AbstractBaseAction"/>	
	<bean id="pageAction" parent="abstractBaseAction" class="com.amex.srt.struts.action.PageAction" />
	<bean id="pageNotFoundAction" parent="abstractBaseAction" class="com.amex.srt.struts.action.PageNotFoundAction" />
	<bean id="serverErrorAction" parent="abstractBaseAction" class="com.amex.srt.struts.action.ServerErrorAction" />
		
	
	<!-- Struts 2 Action Bean Definitions -->
 
	<!--bean id="loadCMSContentTask" class="com.amex.srt.webservice.jobs.LoadCMSContentTask"/>
	
	<bean id="loadCMSContentJob" class="org.springframework.scheduling.quartz.JobDetailBean">

		<property name="jobClass" value="com.amex.srt.webservice.jobs.LoadCMSContentQuartzJob" />

		<property name="jobDataAsMap">
			<map>
				<entry key="loadCMSContentTask" value-ref="loadCMSContentTask" />
			</map>
		</property>

	</bean>

	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">

		<property name="jobDetail" ref="loadCMSContentJob" />
		<property name="cronExpression" value="0 0/1 * * * ?" />

	</bean>
	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	
		<property name="jobDetails">
			<list>
				<ref bean="loadCMSContentJob" />
			</list>
		</property>
 
		<property name="triggers">
			<list>
				<ref bean="cronTrigger" />
			</list>
		</property>
	</bean-->

</beans>

